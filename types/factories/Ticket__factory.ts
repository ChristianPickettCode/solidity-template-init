/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ticket, TicketInterface } from "../Ticket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buyTickets",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ticketHolders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "useTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052662386f26fc1000060005534801561001b57600080fd5b50600180546001600160a01b031916331790556103fa8061003d6000396000f3fe60806040526004361061003f5760003560e01c80633ccfd60b14610044578063734d13b81461005b5780637e33b76c1461009a57806388f57767146100ba575b600080fd5b34801561005057600080fd5b506100596100cd565b005b34801561006757600080fd5b5061008861007636600461033d565b60026020526000908152604090205481565b60405190815260200160405180910390f35b3480156100a657600080fd5b506100596100b536600461035f565b6101d2565b6100596100c836600461035f565b6101e0565b6001546001600160a01b0316331461012c5760405162461bcd60e51b815260206004820152601660248201527f596f7520617265206e6f7420746865206f776e65722e0000000000000000000060448201526064015b60405180910390fd5b6001546040516000916001600160a01b03169047908381818185875af1925050503d8060008114610179576040519150601f19603f3d011682016040523d82523d6000602084013e61017e565b606091505b50509050806101cf5760405162461bcd60e51b815260206004820152601860248201527f7769746864726177206e6f74207375636365737366756c2e00000000000000006044820152606401610123565b50565b6101dc8282610247565b5050565b806000546101ee919061039f565b34101561023d5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682065746820666f72207469636b6574732e00000000006044820152606401610123565b6101dc82826102fd565b6001600160a01b0382166000908152600260205260409020548111156102b95760405162461bcd60e51b815260206004820152602160248201527f596f757220646f206e6f74206861766520656e6f75676874207469636b6574736044820152601760f91b6064820152608401610123565b6001600160a01b0382166000908152600260205260409020546102dd9082906103be565b6001600160a01b0390921660009081526002602052604090209190915550565b6001600160a01b0382166000908152600260205260409020546102dd9082906103d5565b80356001600160a01b038116811461033857600080fd5b919050565b60006020828403121561034f57600080fd5b61035882610321565b9392505050565b6000806040838503121561037257600080fd5b61037b83610321565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156103b9576103b9610389565b500290565b6000828210156103d0576103d0610389565b500390565b600082198211156103e8576103e8610389565b50019056fea164736f6c6343000809000a";

type TicketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ticket__factory extends ContractFactory {
  constructor(...args: TicketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ticket> {
    return super.deploy(overrides || {}) as Promise<Ticket>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ticket {
    return super.attach(address) as Ticket;
  }
  connect(signer: Signer): Ticket__factory {
    return super.connect(signer) as Ticket__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketInterface {
    return new utils.Interface(_abi) as TicketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ticket {
    return new Contract(address, _abi, signerOrProvider) as Ticket;
  }
}
